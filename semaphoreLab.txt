#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/wait.h>
#include <sys/ipc.h>
#include <sys/shm.h>
#include <sys/stat.h>
#include <semaphore.h>
#include <signal.h>

#define SIZE 16


sem_t *binarySem;

int main (int argc, char **argv)
{
   int status;
   long int i, loop, temp, *shmPtr;
   int shmId, shmid;
   pid_t pid;

   // initialized the semaphore
   // first arg is binary semaphore, second arg is if shared in diff threads, third arg is starting value 1 is open 0 is closed
    //initializes semaphore with ability to be shared and a starting value of 1
   key_t key = ftok("shmfile", 123456);
   shmid = shmget(key, 4096, IPC_CREAT|S_IRUSR|S_IWUSR);
   binarySem = (sem_t*) shmat(shmid, 0, 0);
   sem_init(binarySem, 1, 1);

    // get value of loop variable (from command-line argument
   
   // printf("%s\n",argv[1]);
   loop = atoi(argv[1]);
   printf("%ld\n", loop);


   if ((shmId = shmget (IPC_PRIVATE, SIZE, IPC_CREAT|S_IRUSR|S_IWUSR)) < 0) {
      perror ("i can't get no..\n");
      exit (1);
   }
   if ((shmPtr = shmat (shmId, 0, 0)) == (void*) -1) {
      perror ("can't attach\n");
      exit (1);
   }

   shmPtr[0] = 0;
   shmPtr[1] = 1;

   if (!(pid = fork())) {
	for (i=0; i<loop; i++) {
		sem_wait(binarySem);
		temp = shmPtr[0];
                shmPtr[0] = shmPtr[1];
                shmPtr[1] = temp;
	        sem_post(binarySem);	
               // swap the contents of shmPtr[0] and shmPtr[1]
      }

      if (shmdt (shmPtr) < 0) {
         perror ("just can't let go\n");
         exit (1);
      }
      shmdt(binarySem);
      exit(0);
   }
   else
      	for (i=0; i<loop; i++){
		sem_wait(binarySem);
		//sets temp = shmPtr[0]
		temp = shmPtr[0];
		shmPtr[0] = shmPtr[1];
		shmPtr[1] = temp;
		sem_post(binarySem);
               // swap the contents of shmPtr[1] and shmPtr[0] 
	}

   wait (&status);
   printf ("values: %li\t%li\n", shmPtr[0], shmPtr[1]);

   shmdt(binarySem);
   shmctl(shmid, IPC_RMID, 0);

   if (shmdt (shmPtr) < 0) {
      perror ("just can't let go\n");
      exit (1);
   }
   if (shmctl (shmId, IPC_RMID, 0) < 0) {
      perror ("can't deallocate\n");
      exit(1);
   }


   return 0;
}
